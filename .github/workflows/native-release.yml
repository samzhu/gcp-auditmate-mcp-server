name: Build Native, Publish Release & Pages

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # STEP 2: Setup GraalVM
      - name: Setup GraalVM with Java 21
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'

      # STEP 3: Create GraalVM configuration files
      - name: Create GraalVM Configuration Files
        run: |
          mkdir -p src/main/resources/META-INF/native-image
          
          # Create native-image.properties
          cat > src/main/resources/META-INF/native-image/native-image.properties << EOF
          Args = -H:+UnlockExperimentalVMOptions \\
                 -H:+ReportExceptionStackTraces \\
                 -H:+AllowDeprecatedInitializeAllClassesAtBuildTime \\
                 --initialize-at-run-time=org.springframework.util.ClassUtils,org.springframework.util.ConcurrentReferenceHashMap,org.apache.poi.ss.format.CellFormatPart,java.awt.Toolkit \\
                 -H:EnableURLProtocols=http,https \\
                 -Djava.awt.headless=true \\
                 -Dapple.awt.headless=true \\
                 -Dorg.apache.poi.ss.disableAutoColumnWidth=true \\
                 -Dorg.apache.poi.ss.format.disable.color=true
          EOF

      # STEP 4: Clean project
      - name: Clean Project
        run: ./gradlew clean

      # STEP 5: Build native executable using Spring Boot plugin
      - name: Build Native Executable
        run: ./gradlew bootBuildImage -x test
        env:
          JAVA_TOOL_OPTIONS: "-Xmx12g -XX:MaxMetaspaceSize=1g"

      # STEP 6: Build native executable using GraalVM directly
      - name: Build Native Executable with GraalVM
        run: ./gradlew nativeCompile -x test
        env:
          JAVA_TOOL_OPTIONS: "-Xmx12g -XX:MaxMetaspaceSize=1g"

