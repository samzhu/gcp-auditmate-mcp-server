name: Build Native, Publish Release & Pages


on:
  push:
    branches: # Automatically trigger when pushing to main branch
      - main
  workflow_dispatch:  # Allow manual trigger from GitHub UI


# Set required permissions
permissions:
  contents: write  # Allow creating release
  pages: write     # Allow deploying GitHub Pages
  id-token: write  # For GitHub Pages deployment


jobs:
  build-and-release: # Job 1: Build native executable
    # Matrix strategy: build Intel and ARM versions simultaneously
    strategy:
      matrix:
        arch: [intel]  # Currently only Intel defined, can add more in the future
        include:
          # Intel settings
          - arch: intel
            runner: macos-13  # Use macOS 13 (Intel) runner
            target_platform: darwin-x86_64  # GraalVM target platform
            artifact_name: gcp-auditmate-mcp-server-darwin-x86_64  # Artifact name matches target_platform
            memory_options: ""
            build_options: ""
          # ARM settings
          # - arch: arm
          #   runner: macos-latest  # Use macOS-latest (ARM, only 7GB RAM)
          #   target_platform: darwin-aarch64  # GraalVM target platform
          #   artifact_name: gcp-auditmate-mcp-server-darwin-aarch64  # Artifact name matches target_platform
          #   memory_options: ""
          #   build_options: ""

    # Select runner based on matrix variable
    runs-on: ${{ matrix.runner }}

    steps:
      # Checkout repository (shallow checkout for speed)
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Setup GraalVM environment
      - name: Setup GraalVM with Java 21
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          
      # Setup Gradle cache
      - name: Setup Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # Cache GraalVM Native Image build results
      - name: Cache GraalVM Native Image
        uses: actions/cache@v3
        with:
          path: build/native
          key: ${{ runner.os }}-graalvm-native-${{ github.sha }}
          restore-keys: ${{ runner.os }}-graalvm-native-

      # Build native executable using GraalVM native-image
      - name: Build Native Executable
        run: ./gradlew nativeCompile -x test --info
        env:
          JAVA_TOOL_OPTIONS: "${{ matrix.memory_options }} -Dnative-image.target-platform=${{ matrix.target_platform }} ${{ matrix.build_options }}"

      # Ensure the executable has execution permission
      - name: Make MCP server executable
        run: chmod +x build/native/nativeCompile/gcp-auditmate-mcp-server

      # Set version variables
      - name: Set version
        run: |
          echo "VERSION=20250421.1" >> $GITHUB_ENV
          echo "RELEASE_TAG=v20250421.1" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release v20250421.1" >> $GITHUB_ENV
      
      # Prepare release files (keep only the zip archive)
      - name: Prepare release files
        run: |
          mkdir -p release
          echo "Copy and rename executable according to architecture"
          cp build/native/nativeCompile/gcp-auditmate-mcp-server release/${{ matrix.artifact_name }}
          cd release
          echo "Create zip archive containing the executable"
          zip -r ${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}
          echo "Remove original executable, keep only the zip"
          rm ${{ matrix.artifact_name }}
      
      # Upload build artifacts (only upload zip, short retention to save space)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/${{ matrix.artifact_name }}.zip
          retention-days: 1

  # Job 2: Create GitHub Release
  # This job depends on build-and-release
  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      # Checkout repository (shallow checkout for speed)
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        
      # Setup Java environment
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      # Setup Gradle cache
      - name: Setup Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-
      
      # Generate CycloneDX SBOM
      - name: Generate CycloneDX SBOM
        run: |
          ./gradlew cyclonedxBom
          mkdir -p sbom
          cp build/reports/application.cdx.json sbom/gcp-auditmate-mcp-server-bom.json

      # Generate SBOM HTML report using Sunshine
      - name: Generate SBOM HTML report using Sunshine
        run: |
          echo "Install Python (if needed)"
          python -m pip install --upgrade pip
          
          echo "Download Sunshine tool"
          curl -L -o sunshine.py https://raw.githubusercontent.com/CycloneDX/Sunshine/main/sunshine.py
          
          echo "Generate HTML report"
          python sunshine.py -i sbom/gcp-auditmate-mcp-server-bom.json -o sbom/gcp-auditmate-mcp-server-report.html
      
      # Upload SBOM artifacts (short retention)
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            sbom/gcp-auditmate-mcp-server-bom.json
            sbom/gcp-auditmate-mcp-server-report.html
          retention-days: 1

      # Download all build artifacts
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v4
        with:
          path: release
      
      # Set version variables
      - name: Set version
        run: |
          echo "VERSION=20250421.1" >> $GITHUB_ENV
          echo "RELEASE_TAG=v20250421.1" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release v20250421.1" >> $GITHUB_ENV
          echo "INTEL_ARTIFACT=gcp-auditmate-mcp-server-darwin-x86_64" >> $GITHUB_ENV
          echo "ARM_ARTIFACT=gcp-auditmate-mcp-server-darwin-aarch64" >> $GITHUB_ENV
      
      # Prepare GitHub Pages content
      - name: Prepare GitHub Pages content
        run: |
          echo "Checkout website content"
          git clone --depth 1 https://github.com/${{ github.repository }}.git tmp-repo
          mkdir -p pages-content
          cp -r tmp-repo/site/* pages-content/
          
          echo "Copy SBOM report"
          mkdir -p pages-content/sbom
          cp release/sbom-artifacts/gcp-auditmate-mcp-server-report.html pages-content/sbom/index.html
          cp release/sbom-artifacts/gcp-auditmate-mcp-server-bom.json pages-content/sbom/sbom.json
      
      # Upload GitHub Pages content
      - name: Upload GitHub Pages content
        uses: actions/upload-artifact@v4
        with:
          name: pages-content
          path: pages-content
          retention-days: 1

      # Reorganize files for release (only process zip files)
      - name: Reorganize files
        run: |
          mkdir -p combined_release
          cp release/${{ env.INTEL_ARTIFACT }}/${{ env.INTEL_ARTIFACT }}.zip combined_release/
          cp release/sbom-artifacts/gcp-auditmate-mcp-server-bom.json combined_release/${{ env.INTEL_ARTIFACT }}-bom.json
          cp release/sbom-artifacts/gcp-auditmate-mcp-server-report.html combined_release/${{ env.INTEL_ARTIFACT }}-report.html

      # Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: |
            GCP Auditmate MCP Server for Mac
            
            Currently available:
            - Intel Mac (x86_64): ${{ env.INTEL_ARTIFACT }}.zip
            - ARM Mac (aarch64): ${{ env.ARM_ARTIFACT }}.zip
            
            SBOM (Software Bill of Materials) files are provided in the following formats:
            - JSON format raw SBOM data
            - HTML report (generated by CycloneDX Sunshine), including visualized dependencies, vulnerabilities, and license information
            
            View the full [interactive SBOM report](https://samzhu.github.io/gcp-auditmate-mcp-server/sbom/)
            
            Built on: ${{ github.event.repository.updated_at }}
            Commit: ${{ github.sha }}
          draft: false  # Set to true to create a draft release
          prerelease: false  # Set to true to mark as pre-release
          files: |
            combined_release/${{ env.INTEL_ARTIFACT }}.zip
            combined_release/${{ env.INTEL_ARTIFACT }}-bom.json
            combined_release/${{ env.INTEL_ARTIFACT }}-report.html

  # Job 3: Deploy GitHub Pages
  # This job depends on create-release
  deploy-pages:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      # Download GitHub Pages content (using latest v4)
      - name: Download GitHub Pages content
        uses: actions/download-artifact@v4
        with:
          name: pages-content
          path: site
      
      # Upload static site as artifact
      - name: Upload static site as artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site  # Directory containing static site content
          # retention-days: 1  # Short retention to save space

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
